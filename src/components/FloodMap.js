import React, {Component} from "react";
import {Entity, PolygonGraphics, Viewer} from "resium";
import {Rectangle, Cartesian2, Cartesian3, Color, Math, ArcGisMapServerImageryProvider, createWorldTerrain, EllipsoidSurfaceAppearance} from "cesium";
import CSVReader from "react-csv-reader";
import {exportObjects} from "../util/csv";
import swal from 'sweetalert';
import {Button} from "shards-react";

const esri = new ArcGisMapServerImageryProvider({
  url : 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'
});

const cesiumTerrain = createWorldTerrain({requestWaterMask: true})

const co = [
  106.7130772760024,-6.045001950807753,
  106.71108136754684,-6.046138444053557,
  106.70987404754011,-6.048508940624399,
  106.71053651992972,-6.0489580936417005,
  106.71131459318069,-6.055419152220093,
  106.71490154087697,-6.0690184530184395,
  106.72280914544163,-6.081465502987993,
  106.72350473921476,-6.084112829057008,
  106.72456618853545,-6.085630917017255,
  106.72666528528988,-6.086094455700918,
  106.72884253907101,-6.086777238248119,
  106.73385333890826,-6.081594272659827,
  106.74133431648761,-6.088831499714794,
  106.74831186758021,-6.080751982508191,
  106.7511591839813,-6.074459614506032,
  106.75744048678625,-6.077277931538852,
  106.75186759840176,-6.097486615876662,
  106.75746892053971,-6.103852709601715,
  106.76305935295464,-6.104831592496372,
  106.76732181067929,-6.103018237361592,
  106.77337824545229,-6.104970261713345,
  106.77650359851081,-6.103281584272885,
  106.77795265334852,-6.105079778759776,
  106.77899169733008,-6.106992931686015,
  106.78118796783197,-6.107618372642534,
  106.78424139416626,-6.1088066483207255,
  106.78613927406839,-6.108670191877716,
  106.78953907614807,-6.108204835325358,
  106.78996569949088,-6.101202051926752,
  106.790783970986,-6.09619383211165,
  106.79143526543537,-6.0931134538797265,
  106.7973417769988,-6.094150439298415,
  106.79881555195922,-6.0937463072791775,
  106.79978996505739,-6.092377783430269,
  106.80359076061283,-6.093450388283812,
  106.80521089770515,-6.102572570178972,
  106.80669691973009,-6.109041049912296,
  106.80687523387651,-6.113553646477716,
  106.80765487352552,-6.115733233963738,
  106.80736172919191,-6.116376691634614,
  106.8088253141738,-6.117047679957315,
  106.80977976352324,-6.11997635914414,
  106.81164444215041,-6.120516220611136,
  106.81193978972297,-6.1223888124890715,
  106.8126480834373,-6.122216126636221,
  106.8119498454984,-6.119198368479241,
  106.81626088771976,-6.119830968157734,
  106.81743718926319,-6.114975550837721,
  106.82870416255759,-6.116522388020303,
  106.82968018115534,-6.120282345283615,
  106.83097464438646,-6.120725841223802,
  106.8338810895153,-6.120800440473564,
  106.83507573593018,-6.121418431810661,
  106.83646053140446,-6.1212791889676135,
  106.84261085685654,-6.121125444881435,
  106.84590760766933,-6.1204228693891425,
  106.84609425789967,-6.119754761154406,
  106.84854052374435,-6.117548524809402,
  106.85651833280892,-6.110178073508045,
  106.85921329704503,-6.111200112955496,
  106.86070852649688,-6.110606830582193,
  106.86339550039821,-6.111981059659621,
  106.87228587050576,-6.104832098354363,
  106.87447569859559,-6.097411766105927,
  106.87589105889302,-6.097032913462114,
  106.87670351900704,-6.094778496992584,
  106.87956170836107,-6.094395375828417,
  106.88159650594784,-6.094041900451402,
  106.88793617547655,-6.089998997333822,
  106.89874456136485,-6.089180491320709,
  106.8989256842096,-6.082524194909059,
  106.92329183432538,-6.082108789675698,
  106.9241265592878,-6.09821654099816,
  106.92580762089639,-6.097905422305504,
  106.93640575897582,-6.095860631711961,
  106.93640579375251,-6.094724210899729,
  106.93829770723809,-6.094665523815176,
  106.93940459337152,-6.0961513908273695,
  106.94107328915806,-6.097748456721409,
  106.94672294043762,-6.0965046118213015,
  106.94755656478242,-6.091385966983188,
  106.950159484908,-6.0954628025419755,
  106.94978381338868,-6.090329649993621,
  106.95327094227589,-6.089388166144429,
  106.95560964947008,-6.093722610815302,
  106.956697500136,-6.093529157509759,
  106.95814525345567,-6.093528263143371,
  106.96032139470762,-6.0934469075401365,
  106.9624031533744,-6.092590787556394,
  106.96418416923153,-6.093897106086202,
  106.96761344067752,-6.092261676605101,
  106.97080791276632,-6.0876423921581715,
  106.9731326812482,-6.087007218668389,
  106.96921127004552,-6.072014996075803,
  106.97267644642702,-6.066482304974451,
  106.9751270599946,-6.065486283540262,
  106.97719299293189,-6.064208252387824,
  106.9746422266497,-6.060195519158132,
  106.97605578076134,-6.055730412486965,
  106.97548780296094,-6.049531908733971,
  106.9742164224975,-6.046476573418547,
  106.97733333016826,-6.042753733873094,
  106.9780087075433,-6.041049746116722,
  106.98033650995008,-6.043328282593933,
  106.98243854468578,-6.045301193846824,
  106.98420763385622,-6.03820329192748,
  106.9838016583411,-6.033545817965837,
  106.98279131617416,-6.027988835769479,
  106.97901598279257,-6.019095930392016,
  106.97905301579091,-6.016187943912216,
  106.97797877964328,-6.013738920717081,
  106.97905028164195,-6.011826343300197,
  106.97780579856473,-6.007633504424244,
  106.97957012432319,-6.006217520978582,
  106.98030343374904,-6.002435591924717,
  106.98576445738297,-6.002307789709007,
  106.98766194715652,-5.990692801487454,
  106.9929621894884,-5.976795666775485,
  107.00132653318646,-5.967187453052106,
  107.01051099555426,-5.957020082659632,
  106.99146109065316,-5.941559878110702,
  106.98784257391662,-5.9377539645208595,
  107.0012247736177,-5.931188236525188,
  107.01114294450117,-5.919750242509167,
  107.01991282155561,-5.921238580986285,
  107.03209103670967,-5.926281113550785,
  107.03561096429763,-5.922674952259924,
  107.0501063142196,-5.92676615584755,
  107.09203860535692,-5.935183959720517,
  107.13314743782949,-5.975382260155352,
  107.15850052424628,-5.986850066162828,
  107.1655477299687,-5.987182161103845,
  107.17920921081046,-5.986311946404596,
  107.17142088897982,-6.07225421439741,
  107.18214966042038,-6.1253062926030735,
  107.18862456172137,-6.183462263222823,
  107.17888403701245,-6.233909845557687,
  107.1769799647922,-6.252391971018119,
  107.19558292869338,-6.260844268083952,
  107.19160860860947,-6.277540571701394,
  107.17151912805026,-6.293695547630465,
  107.17566950587765,-6.327611073611326,
  107.16764430216601,-6.378699407851169,
  107.12684028997013,-6.383371644434547,
  107.08489969179183,-6.349118856753787,
  107.06782294048044,-6.329360814781624,
  107.05792753309937,-6.31064502572015,
  107.04296093809519,-6.3249807453501425,
  107.02022332446127,-6.352239414323422,
  107.00820118498031,-6.369093657088042,
  106.99101743855508,-6.393478170396286,
  106.99067095519858,-6.419966045414307,
  107.00130065540478,-6.432754340572231,
  106.9975874851852,-6.4590726948533055,
  106.98680750061037,-6.494940270997732,
  106.9580609731354,-6.507290404782206,
  106.94793945017847,-6.519249854254258,
  106.92624018982298,-6.533873800312305,
  106.8921706793503,-6.5332991170371235,
  106.85689767454143,-6.5236605088007975,
  106.84660813128585,-6.541695644048695,
  106.83088456384509,-6.568341268394333,
  106.83225549051707,-6.589501853527142,
  106.83513038613843,-6.6353228392999775,
  106.85404508851326,-6.669796695436569,
  106.84293652948315,-6.685318196680353,
  106.82433420402448,-6.6645852741816345,
  106.80519178825783,-6.639619509777697,
  106.78379499185725,-6.63886719172782,
  106.76678562111101,-6.622115369784636,
  106.74733879043536,-6.6077412676461025,
  106.74179687021687,-6.592993944159147,
  106.71213068538209,-6.585707213984546,
  106.6974483315306,-6.557352002343599,
  106.68552465749082,-6.481909807133334,
  106.71178905847187,-6.4703362819687475,
  106.71470104016804,-6.439987263904061,
  106.69526381803354,-6.4115576198293365,
  106.67692742391051,-6.405100639909106,
  106.65335913226053,-6.401877872250037,
  106.6299297017087,-6.386966542852587,
  106.62170586468844,-6.374759963858946,
  106.60916520893899,-6.363016886092043,
  106.59381304161123,-6.363641748796221,
  106.58718601556018,-6.369775935162267,
  106.57297112218997,-6.377940679625458,
  106.54553684261606,-6.39043582773898,
  106.52404987487422,-6.377776425084816,
  106.52824238836358,-6.356230806727381,
  106.53748781071319,-6.334391963509802,
  106.53405247110179,-6.327033863051339,
  106.52363205690872,-6.31574087104885,
  106.51464355816213,-6.301259589143036,
  106.49436828181986,-6.2878663925256175,
  106.47806443767341,-6.28424446240173,
  106.46159904858385,-6.292090164674312,
  106.44540635448244,-6.281330553405607,
  106.44468638124792,-6.270970234292787,
  106.44741567461955,-6.254643613055408,
  106.46586104243474,-6.2311241888238955,
  106.45593507368338,-6.222950141252032,
  106.4395206712399,-6.230411515602869,
  106.43322217092627,-6.232756840767988,
  106.41475020173347,-6.220392549389826,
  106.42491437260982,-6.202960667744902,
  106.43183045370148,-6.192710028868191,
  106.43423164180655,-6.175627147919824,
  106.43867555690211,-6.161696900330821,
  106.4576172977254,-6.160962540304737,
  106.47082331423087,-6.16877817891719,
  106.49531514151904,-6.174037278954108,
  106.51363294632375,-6.162550329100698,
  106.5249529861673,-6.15088139893232,
  106.53011570231939,-6.133937147123822,
  106.53894068026227,-6.112178937744522,
  106.5339866705378,-6.100387156974586,
  106.536763054599,-6.07730675477361,
  106.53323542191367,-6.064684616724495,
  106.54267908706042,-6.0469747296284115,
  106.55133407642995,-6.04180227593806,
  106.56004407035682,-6.032822448225016,
  106.56296223796267,-6.026638699818717,
  106.57459924033694,-6.030165073101498,
  106.58118611886214,-6.032232190483105,
  106.58834774547474,-6.032235206921787,
  106.60621908241501,-6.025851067440704,
  106.61635868121704,-6.024201927442129,
  106.62449002873706,-6.015717068302803,
  106.62623490726503,-6.010019872545847,
  106.63190326681581,-5.998438559940893,
  106.63869661507565,-6.0035057288025575,
  106.64287248347627,-6.001267888501572,
  106.6473374385175,-6.00350222417085,
  106.64973910898766,-6.012480688459576,
  106.65543999172918,-6.016523833192183,
  106.6648611852046,-6.02177036488787,
  106.67840411045144,-6.015372184486455,
  106.69455614466308,-6.024543987277396,
  106.70251827689336,-6.0311685187567665,
  // 106.71895435567745,-6.045869034716208,
];

export class FloodMap extends Component {
  constructor(props) {
    super(props)
    this.state = {
      currentEntity: {
        points: []
      },
      entities: [],
      data: [],
      water: null,
    }
  }

  importData = (data, _) => {
    console.log(data)

    try {
      const entities = []
      for (let row of data) {
        const realPoints = JSON.parse(row.points)
        const points = realPoints.map((point, index) => {
          if (index % 2 === 0) {
            return point - 0.000007
          } else {
            return point + 0.000025
          }
        })
        const entity = {
          ...row,
          points: points,
          isDamaged: row.isDamaged === "true"
        }
        entities.push(entity)
      }

      this.setState({entities: entities}, () => console.log(this.state))
    } catch (e) {
      console.log("error importing data", e.message)
    }
  }

  changeWaterLevel() {
    const { waterLevel } = this.props;

    // if nil, init water level
    if (!this.state.water) {
      // if nil, and new water level value == 0 do nothing
      if (waterLevel === 0) {
        return
      }

      const water = this.viewer.entities.add({
        name : 'Blue extruded polygon over Palu',
        polygon : {
          hierarchy : Cartesian3.fromDegreesArray(co),
          extrudedHeight: waterLevel,
          // vertexFormat allows it to warp around the globe
          vertexFormat : EllipsoidSurfaceAppearance.VERTEX_FORMAT,
          material : Color.BLUE.withAlpha(0.2),
        },
      });
      this.setState({ water });

      return
    }

    // if already init (not nil), update water level
    this.state.water.polygon.extrudedHeight = waterLevel;
  }

  componentDidMount() {
    this.viewer.scene.camera.flyTo({
      destination : Rectangle.fromDegrees(106.755150, -6.128806, 106.945889, -6.292435),
    });
  }

  getLocationFromScreenXY = (x, y) => {
    const scene = this.viewer.scene
    if (!scene) {
      return
    }

    const ellipsoid = scene.globe.ellipsoid;
    const cartesian = scene.camera.pickEllipsoid(new Cartesian2(x, y), ellipsoid);
    if (!cartesian) {
      return
    }

    return ellipsoid.cartesianToCartographic(cartesian);
  }

  onMapClick = (event, _) => {
    const coords = this.getLocationFromScreenXY(event.position.x, event.position.y);
    const lat = Math.toDegrees(coords.latitude)
    const long = Math.toDegrees(coords.longitude)

    const points = [...this.state.currentEntity.points, [long, lat]]
    this.setState({
      ...this.state,
      currentEntity: {
        ...this.state.currentEntity,
        points: points
      },
      data: [...this.state.data, {long, lat}],
    }, () => console.log(this.state.data))
  }

  clearCurrentEntity = () => {
    this.setState({
      ...this.state,
      currentEntity: {
        points: []
      }
    })
  }

  isBuildingDamaged = async () => {
    const answer = await swal("Is this building damageedsz?", {
      buttons: {
        yes: "Aww yiss!",
        cancel: "Oh noez!"
      }
    });

    return answer === "yes"
  }

  saveSelection = async () => {
    const {currentEntity} = this.state
    this.clearCurrentEntity()

    currentEntity["isDamaged"] = await this.isBuildingDamaged()
    currentEntity["points"] = currentEntity.points.reduce((total, curr) => {
      return total.concat(curr);
    })
    this.setState({
      ...this.state,
      entities: [...this.state.entities, currentEntity]
    })
  }

  render() {
    // console.log(this.state)
    const {currentEntity, entities} = this.state
    const points = currentEntity.points || []
    this.changeWaterLevel()

    return (
      <div style={{position: "relative", width: "100%", minHeight: "750px"}}>
        <Viewer full
                style={{position: "absolute"}}
                ref={e => {
                  this.viewer = e ? e.cesiumElement : null;
                }}
                imageryProvider={esri}
                terrainProvider={cesiumTerrain}
                onClick={this.onMapClick}
                changeWaterLevel={this.changeWaterLevel}
        />
      </div>
    )
  }
}
